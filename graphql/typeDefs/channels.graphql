# Input type for creating a new channel
input CreateChannelInput {
  name: String!
  members: [String!]!
}

type CreateChannelResponse {
  channel: Channel!
}

input GetChannelMessagesInput {
  channelId: String!
}

# Response type for getUserChannels query
type GetUserChannelsResponse {
  channels: [Channel!]!
}

# Channel entity
type Channel {
  id: String!
  name: String!
  members: [User!]!
  admin: User!
  messages: [Message!]!
  createdAt: String!
  updatedAt: String!
}

# User entity
type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  image: String
}

type Message {
  id: ID!
  messageType: String
  fileUrl: String
  createdAt: String
  updatedAt: String
  senderId: String!
  sender: User
  recipientId: String!
  content: String
  edited: Boolean!
  reactions: [Reaction]
}

type Reaction {
  id: ID!
  messageId: String!
  userId: String!
  type: String!
  createdAt: String!
}

input SendChannelMessageInput {
  channelId: String!
  senderId: String!
  content: String
  fileUrl: String
  messageType: String!
}

input SearchInput {
  searchTerm: String!
}

extend type Query {
  searchChannel(input: SearchInput!): [Channel!]!
  getUserChannels: GetUserChannelsResponse!
  getChannelMessages(input: GetChannelMessagesInput!): [Message!]!
}

type Mutation {
  createChannelMessage(input: SendChannelMessageInput!): Message!
  createChannel(input: CreateChannelInput!): CreateChannelResponse!
}
