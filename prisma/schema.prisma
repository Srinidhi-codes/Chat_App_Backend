// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  firstName        String?
  lastName         String?
  image            String?
  color            Int?
  resetToken       String?
  resetTokenExpiry BigInt?
  otp              String?
  otpExpiry        BigInt?
  theme            String   @default("dark")
  profileSetup     Boolean? @default(false)
  createdAt        DateTime @default(now())

  messagesSent     messages[] @relation("MessagesSent")
  messagesReceived messages[] @relation("MessagesReceived")

  channels      channel[]  @relation("ChannelMembers")
  adminChannels channel[]  @relation("ChannelAdmin")
  messages      messages?  @relation(fields: [messagesId], references: [id])
  readMessages  messages[] @relation("ReadMessages")
  messagesId    String?
  reaction      reaction[]
}

model messages {
  id          String  @id @default(uuid())
  senderId    String
  recipientId String?
  channelId   String?

  messageType MessageType
  content     String?
  edited      Boolean     @default(false)
  fileUrl     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  sender    user       @relation("MessagesSent", fields: [senderId], references: [id])
  recipient user?      @relation("MessagesReceived", fields: [recipientId], references: [id])
  channel   channel?   @relation("ChannelMessages", fields: [channelId], references: [id])
  readBy    user[]     @relation("ReadMessages")
  user      user[]
  reaction  reaction[]
}

model channel {
  id       String     @id @default(uuid())
  name     String
  adminId  String
  admin    user       @relation("ChannelAdmin", fields: [adminId], references: [id])
  members  user[]     @relation("ChannelMembers")
  messages messages[] @relation("ChannelMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model reaction {
  id        String   @id @default(uuid())
  message   messages @relation(fields: [messageId], references: [id])
  messageId String

  user   user   @relation(fields: [userId], references: [id])
  userId String

  type      String // e.g., "like", "heart", "laugh"
  createdAt DateTime @default(now())

  @@unique([messageId, userId]) // Prevent duplicate reactions of same type by same user on a message
}

enum MessageType {
  text
  file
  image
  video
}
